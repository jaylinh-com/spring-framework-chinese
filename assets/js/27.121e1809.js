(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{384:function(e,t,a){"use strict";a.r(t);var s=a(43),o=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"_2-1-introduction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-introduction"}},[e._v("#")]),e._v(" 2.1. Introduction")]),e._v(" "),a("p",[e._v("Javaâ€™s standard "),a("code",[e._v("java.net.URL")]),e._v(" class and standard handlers for various URL prefixes, unfortunately, are not quite adequate enough for all access to low-level resources. For example, there is no standardized "),a("code",[e._v("URL")]),e._v(" implementation that may be used to access a resource that needs to be obtained from the classpath or relative to a "),a("code",[e._v("ServletContext")]),e._v(". While it is possible to register new handlers for specialized "),a("code",[e._v("URL")]),e._v(" prefixes (similar to existing handlers for prefixes such as "),a("code",[e._v("http:")]),e._v("), this is generally quite complicated, and the "),a("code",[e._v("URL")]),e._v(" interface still lacks some desirable functionality, such as a method to check for the existence of the resource being pointed to.")])])}),[],!1,null,null,null);t.default=o.exports}}]);