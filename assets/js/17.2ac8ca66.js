(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{376:function(t,a,s){"use strict";s.r(a);var e=s(43),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_1-3-bean-概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-bean-概述"}},[t._v("#")]),t._v(" 1.3 Bean 概述")]),t._v(" "),s("p",[t._v("Spring IOC 容器管理一个或多个 bean。这些 bean 是使用您提供给容器的配置元数据创建的（例如，以 XML"),s("code",[t._v("<bean/>")]),t._v("定义的形式）。")]),t._v(" "),s("p",[t._v("在容器本身内，这些 bean 定义表示为"),s("code",[t._v("BeanDefinition")]),t._v("对象，其中包含（以及其他信息）以下元数据：")]),t._v(" "),s("ul",[s("li",[t._v("包限定的类名：通常是定义的 bean 的实际实现类。")]),t._v(" "),s("li",[t._v("bean 行为配置元素，它规定 bean 在容器中的行为（作用域、生命周期回调等等）。")]),t._v(" "),s("li",[t._v("对Bean执行其工作所需的其他Bean的引用。这些引用也称为协作者或依赖项。")]),t._v(" "),s("li",[t._v("要在新创建的对象中设置的其他配置，例如在管理连接池的Bean中使用的连接数量或池的大小限制。")])]),t._v(" "),s("p",[t._v("此元数据转换为组成每个 bean 定义的一组属性。下表介绍了这些属性：")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("表 1.Bean 定义。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("属性")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("解释​")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("类")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("a",{attrs:{href:"https://docs.spring.io/spring/docs/5.2.6.RELEASE/spring-framework-reference/core.html#beans-factory-class",target:"_blank",rel:"noopener noreferrer"}},[t._v("实例化 Beans"),s("OutboundLink")],1)])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("名称")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("a",{attrs:{href:"https://docs.spring.io/spring/docs/5.2.6.RELEASE/spring-framework-reference/core.html#beans-beanname",target:"_blank",rel:"noopener noreferrer"}},[t._v("命名 Beans"),s("OutboundLink")],1)])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("作用域")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("a",{attrs:{href:"https://docs.spring.io/spring/docs/5.2.6.RELEASE/spring-framework-reference/core.html#beans-factory-scopes",target:"_blank",rel:"noopener noreferrer"}},[t._v("Bean 作用域"),s("OutboundLink")],1)])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("构造函数参数")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("a",{attrs:{href:"https://docs.spring.io/spring/docs/5.2.6.RELEASE/spring-framework-reference/core.html#beans-factory-collaborators",target:"_blank",rel:"noopener noreferrer"}},[t._v("依赖注入"),s("OutboundLink")],1)])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("属性")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("a",{attrs:{href:"https://docs.spring.io/spring/docs/5.2.6.RELEASE/spring-framework-reference/core.html#beans-factory-collaborators",target:"_blank",rel:"noopener noreferrer"}},[t._v("依赖注入"),s("OutboundLink")],1)])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("自动装配模式")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("a",{attrs:{href:"https://docs.spring.io/spring/docs/5.2.6.RELEASE/spring-framework-reference/core.html#beans-factory-autowire",target:"_blank",rel:"noopener noreferrer"}},[t._v("自动装配协作者"),s("OutboundLink")],1)])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("延迟初始化模式")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("a",{attrs:{href:"https://docs.spring.io/spring/docs/5.2.6.RELEASE/spring-framework-reference/core.html#beans-factory-lazy-init",target:"_blank",rel:"noopener noreferrer"}},[t._v("延迟-初始化的Beans"),s("OutboundLink")],1)])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("初始化方法")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("a",{attrs:{href:"https://docs.spring.io/spring/docs/5.2.6.RELEASE/spring-framework-reference/core.html#beans-factory-lifecycle-initializingbean",target:"_blank",rel:"noopener noreferrer"}},[t._v("初始化回调"),s("OutboundLink")],1)])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("销毁方式")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("a",{attrs:{href:"https://docs.spring.io/spring/docs/5.2.6.RELEASE/spring-framework-reference/core.html#beans-factory-lifecycle-disposablebean",target:"_blank",rel:"noopener noreferrer"}},[t._v("销毁回调"),s("OutboundLink")],1)])])])])]),t._v(" "),s("p",[t._v("除了包含如何创建特定 bean 的 bean 定义之外，"),s("code",[t._v("ApplicationContext")]),t._v("实现还允许注册容器外(由用户)创建的现有对象。通过"),s("code",[t._v("getBeanFactory()")]),t._v("方法访问 ApplicationContext 的 BeanFactory ，返回"),s("code",[t._v("BeanFactory``DefaultListableBeanFactory")]),t._v("实现。"),s("code",[t._v("DefaultListableBeanFactory")]),t._v("通过"),s("code",[t._v("registerSingleton(..)")]),t._v("和"),s("code",[t._v("registerBeanDefinition(..)")]),t._v("方法支持该注册。但是，典型的应用程序只使用通过常规 bean 定义元数据定义的 bean。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("需要尽早注册 Bean 元数据和手动提供的 Singleton 实例，以便容器在自动装配和其他自省步骤期间能够正确地对它们进行推理。虽然在一定程度上支持覆盖现有的元数据和现有的单例实例，但不正式支持在运行时注册新的 bean （与工厂的实时访问并发），并且可能导致并发访问异常、bean 容器中的状态不一致，或者两者兼而有之。")])]),t._v(" "),s("h2",{attrs:{id:"_1-3-1-命名-bean"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-1-命名-bean"}},[t._v("#")]),t._v(" 1.3.1 命名 Bean")]),t._v(" "),s("p",[t._v("每个 bean 都有一个或多个标识符。这些标识符在托管 bean 的容器中必须是唯一的。一个 bean 通常只有一个标识符。但是，如果它需要多个，则多余的可以被视为别名。")]),t._v(" "),s("p",[t._v("在基于 XML 的配置元数据中，您可以使用"),s("code",[t._v("id")]),t._v("属性或"),s("code",[t._v("name")]),t._v("属性来指定 bean 标识符。"),s("code",[t._v("id")]),t._v("属性只允许您指定一个 id。通常，这些名称是含有字母数字的（‘myBean’、‘omeService’等)，但它们也可以包含特殊字符。如果您想为 bean 引入其他别名，也可以在"),s("code",[t._v("name")]),t._v("属性中指定它们，用逗号(,)、分号(;）或空格分隔。值得注意的是，在 Spring3.1 之前的版本中，"),s("code",[t._v("id")]),t._v("属性被定义为"),s("code",[t._v("xsd:id")]),t._v("类型，它限制了可能的字符。从 3.1 开始，定义为"),s("code",[t._v("xsd：string")]),t._v("类型。请注意，bean‘id’唯一性仍然由容器强制执行，尽管不再由 XML 解析器强制执行。")]),t._v(" "),s("p",[t._v("bean 不需要提供"),s("code",[t._v("name")]),t._v("或"),s("code",[t._v("id")]),t._v("。如果不显式提供"),s("code",[t._v("name")]),t._v("或"),s("code",[t._v("id")]),t._v("，容器会为该 bean 生成唯一的名称。但是，如果您希望通过使用"),s("code",[t._v("ref")]),t._v("元素或服务定位器样式查找来按名称引用该 bean，则必须提供一个名称。不提供名称的原因与使用"),s("a",{attrs:{href:"https://docs.spring.io/spring/docs/5.2.6.RELEASE/spring-framework-reference/core.html#beans-inner-beans",target:"_blank",rel:"noopener noreferrer"}},[t._v("内部 beans"),s("OutboundLink")],1),t._v("和"),s("a",{attrs:{href:"https://docs.spring.io/spring/docs/5.2.6.RELEASE/spring-framework-reference/core.html#beans-factory-autowire",target:"_blank",rel:"noopener noreferrer"}},[t._v("自动装配协作者"),s("OutboundLink")],1),t._v("]相关")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("Bean 命名约定")]),t._v(" "),s("p",[t._v("约定是在命名 bean 时使用标准的 Java 约定，例如字段名称。也就是说，bean 名称以小写字母开头，并且从那里开始采用驼峰大小写。这些名称的示例包括"),s("code",[t._v("accountManager")]),t._v("、"),s("code",[t._v("countService")]),t._v("、"),s("code",[t._v("userDao")]),t._v("、"),s("code",[t._v("loginController")]),t._v("等。")]),t._v(" "),s("p",[t._v("始终如一地命名 bean 使您的配置更易于阅读和理解。此外，如果您使用的是Spring AOP，那么将"),s("code",[t._v("Advice")]),t._v("应用到一组按名称关联的Bean上会有很大帮助。")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("通过在类路径中扫描组件，Spring 将按照前面描述的规则为未命名的组件生成 bean 名称：本质上，获取简单的类名并将其初始字符转换为小写。但是，在（不常见）特殊情况下，如果有多个字符，并且第一个和第二个字符都是大写，则会保留原始大小写。这些规则与"),s("code",[t._v("java.beans.Introspector.decapitalize")]),t._v("（Spring 在这里使用）定义的规则相同。")])]),t._v(" "),s("h3",{attrs:{id:"为-bean-定义外部的-bean-指定别名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为-bean-定义外部的-bean-指定别名"}},[t._v("#")]),t._v(" 为 Bean 定义外部的 Bean 指定别名")]),t._v(" "),s("p",[t._v("在 bean 定义本身中，通过使用 id 属性指定的最多一个名称和 name 属性中任意数量的其他名称的组合，可以为 bean 提供多个名称。这些名称可以是同一 Bean 的等效别名，并且在某些情况下很有用，例如通过使用特定于组件本身的 Bean 名称让应用程序中的每个组件引用公共依赖项。")]),t._v(" "),s("p",[t._v("但是，指定实际定义 bean 的所有别名并不总是足够的。有时需要为在其他地方定义的 bean 引入别名。这通常是在大型系统中的情况，其中配置在每个子系统之间拆分，每个子系统具有其自己的对象定义集。在基于 XML 的配置元数据中，可以使用"),s("code",[t._v("<alias/>")]),t._v("元素来实现。以下示例显示如何执行此操作：")]),t._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("alias")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("fromName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("alias")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("toName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])]),s("p",[t._v("在这种情况下，在使用该别名定义之后，名为"),s("code",[t._v("fromName")]),t._v("的 bean （在同一容器中）也可以被称为"),s("code",[t._v("toName")]),t._v("。")]),t._v(" "),s("p",[t._v("例如，子系统 A 的配置元数据可以通过名称"),s("code",[t._v("subsystemA-dataSource")]),t._v("引用数据源。子系统 B 的配置元数据可以引用名为"),s("code",[t._v("subsystemB-dataSource")]),t._v("的数据源。在组合使用这两个子系统的主应用程序时，主应用程序以"),s("code",[t._v("myApp-dataSource")]),t._v("的名称引用 DataSource。要使所有三个名称都引用同一对象，您可以将以下别名定义添加到配置元数据：")]),t._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("alias")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("myApp-dataSource"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("alias")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("subsystemA-dataSource"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("alias")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("myApp-dataSource"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("alias")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("subsystemB-dataSource"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])]),s("p",[t._v("现在，每个组件和主应用程序都可以通过唯一且保证不与任何其他定义冲突的名称引用 DataSource （有效地创建了一个名称空间），但它们引用的是同一个 bean。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("Java-配置")]),t._v(" "),s("p",[t._v("如果您使用的是 Java 配置，则可以使用"),s("code",[t._v("@Bean")]),t._v("注释来提供别名。请参见"),s("a",{attrs:{href:"https://docs.spring.io/spring/docs/5.2.6.RELEASE/spring-framework-reference/core.html#beans-java-bean-annotation",target:"_blank",rel:"noopener noreferrer"}},[t._v("使用 "),s("code",[t._v("@Bean")]),t._v(" 注解"),s("OutboundLink")],1)])]),t._v(" "),s("h2",{attrs:{id:"_1-3-2-实例化-bean"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-2-实例化-bean"}},[t._v("#")]),t._v(" 1.3.2 实例化 Bean")]),t._v(" "),s("p",[t._v("Bean 定义本质上是创建一个或多个对象的配方。必要的时候，容器查看命名 bean 的配方，并使用由该 bean 定义封装的配置元数据来创建（或获取）实际对象。")]),t._v(" "),s("p",[t._v("如果您使用基于XML的配置元数据，则需要在"),s("code",[t._v("<bean/>")]),t._v("元素的"),s("code",[t._v("class")]),t._v("属性中指定要实例化的Object的类型(或类)。此"),s("code",[t._v("class")]),t._v("属性(内部是"),s("code",[t._v("BeanDefinition")]),t._v("实例的"),s("code",[t._v("Class")]),t._v("属性)通常是必需的。(异常参见"),s("a",{attrs:{href:"https://docs.spring.io/spring/docs/5.2.6.RELEASE/spring-framework-reference/core.html#beans-factory-class-instance-factory-method",target:"_blank",rel:"noopener noreferrer"}},[t._v("使用实例工厂Method"),s("OutboundLink")],1),t._v("实例化]和"),s("a",{attrs:{href:"https://docs.spring.io/spring/docs/5.2.6.RELEASE/spring-framework-reference/core.html#beans-child-bean-definitions",target:"_blank",rel:"noopener noreferrer"}},[t._v("Bean定义Inheritance"),s("OutboundLink")],1),t._v(".)。您可以通过以下两种方式之一使用"),s("code",[t._v("Class")]),t._v("属性：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("通常，在容器本身通过反射调用其构造函数直接创建 Bean 的情况下，指定要构造的 Bean 类，这在某种程度上相当于带有"),s("code",[t._v("new")]),t._v("操作符的 Java 代码。")])]),t._v(" "),s("li",[s("p",[t._v("指定包含用于创建对象的"),s("code",[t._v("static")]),t._v("工厂方法的实际类，在容器调用类上的"),s("code",[t._v("static")]),t._v("工厂方法以创建 bean 的较不常见的情况下。调用"),s("code",[t._v("static")]),t._v("工厂方法返回的 Object 类型可以是同一个类，也可以完全是另一个类。")])])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("内部类名")]),t._v(" "),s("p",[t._v("如果要为"),s("code",[t._v("static")]),t._v("嵌套类配置 bean 定义，则必须使用嵌套类的二进制名称。")]),t._v(" "),s("p",[t._v("例如，如果您在"),s("code",[t._v("com.example")]),t._v("包中有一个名为"),s("code",[t._v("SomeThing")]),t._v("的类，并且这个"),s("code",[t._v("SomeThing")]),t._v("类有一个名为"),s("code",[t._v("OtherThing")]),t._v("的"),s("code",[t._v("static")]),t._v("嵌套类，则 Bean 定义上的"),s("code",[t._v("class")]),t._v("属性的值为"),s("code",[t._v("com.example.SomeThing$OtherThing")]),t._v("。")]),t._v(" "),s("p",[t._v("请注意，名称中使用"),s("code",[t._v("$")]),t._v("字符将嵌套的类名与外部类名分开。")])]),t._v(" "),s("h3",{attrs:{id:"使用构造函数实例化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用构造函数实例化"}},[t._v("#")]),t._v(" 使用构造函数实例化")]),t._v(" "),s("p",[t._v("当您通过构造函数方法创建 bean 时，所有普通类都可由 Spring 使用并与 Spring 兼容。也就是说，正在开发的类不需要实现任何特定的接口，也不需要以特定的方式编码。只需指定 bean 类就足够了。但是，根据您对特定 bean 使用的 IoC 类型，您可能需要一个默认（空）构造函数。")]),t._v(" "),s("p",[t._v("Spring IOC 容器几乎可以管理您希望它管理的任何类。它不仅限于管理真正的 JavaBean。大多数 Spring 用户更喜欢实际的 JavaBean，它只有一个默认（无参数）构造函数，以及根据容器中的属性建模的适当的 setter 和 getter。您还可以在容器中包含更多奇异的非 bean 样式的类。例如，如果您需要使用绝对不符合 JavaBean 规范的遗留连接池，Spring 也可以管理它。")]),t._v(" "),s("p",[t._v("使用基于 XML 的配置元数据，您可以按如下方式指定 Bean 类：")]),t._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("bean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("exampleBean"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("examples.ExampleBean"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("bean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("anotherExample"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("examples.ExampleBeanTwo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])]),s("p",[t._v("有关向构造函数提供参数(如果需要)以及在构造对象后设置对象实例属性的机制的详细信息，请参阅"),s("a",{attrs:{href:"https://docs.spring.io/spring/docs/5.2.6.RELEASE/spring-framework-reference/core.html#beans-factory-collaborators",target:"_blank",rel:"noopener noreferrer"}},[t._v("依赖"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"使用静态工厂方法实例化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用静态工厂方法实例化"}},[t._v("#")]),t._v(" 使用静态工厂方法实例化")]),t._v(" "),s("p",[t._v("定义使用静态工厂方法创建的 bean 时，使用"),s("code",[t._v("class")]),t._v("属性指定包含"),s("code",[t._v("static")]),t._v("工厂方法的类，使用名为"),s("code",[t._v("Factory-method")]),t._v("的属性指定工厂方法本身的名称。您应该能够调用此方法（使用可选参数，如稍后所述）并返回活动对象，随后将其视为通过构造函数创建。这种 bean 定义的一种用途是在遗留代码中调用 "),s("code",[t._v("static")]),t._v(" 工厂。")]),t._v(" "),s("p",[t._v("下面的 bean 定义指定通过调用工厂方法创建 bean。该定义没有指定返回对象的类型（类），只指定了包含工厂方法的类。在本例中，"),s("code",[t._v("createInstance()")]),t._v("方法必须是静态方法。以下示例显示如何指定工厂方法：")]),t._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("bean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("clientService"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("examples.ClientService"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("factory-method")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("createInstance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])]),s("p",[t._v("下面的示例显示了一个可以与前面的bean定义一起使用的类：")]),t._v(" "),s("SwitchCode",{scopedSlots:t._u([{key:"java",fn:function(){return[s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClientService")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClientService")]),t._v(" clientService "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClientService")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClientService")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClientService")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" clientService"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]},proxy:!0},{key:"kotlin",fn:function(){return[s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" ClientService "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("constructor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("companion")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("object")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" clientService "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ClientService")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" clientService\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]},proxy:!0}])}),t._v(" "),s("p",[t._v("有关向工厂方法提供(可选)参数以及在对象从工厂返回后设置对象实例属性的机制的详细信息，可参阅"),s("a",{attrs:{href:"https://docs.spring.io/spring/docs/5.2.6.RELEASE/spring-framework-reference/core.html#beans-factory-properties-detailed",target:"_blank",rel:"noopener noreferrer"}},[t._v("依赖关系和配置的详细说明"),s("OutboundLink")],1)]),t._v(" "),s("h3",{attrs:{id:"使用实例工厂方法进行实例化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用实例工厂方法进行实例化"}},[t._v("#")]),t._v(" 使用实例工厂方法进行实例化")]),t._v(" "),s("p",[t._v("与通过"),s("code",[t._v("静态工厂方法")]),t._v("实例化类似，使用实例工厂方法实例化将调用容器中已有 bean 的非静态方法来创建新 bean。要使用此机制，请将"),s("code",[t._v("class")]),t._v("属性保留为空，并在"),s("code",[t._v("Factory-bean")]),t._v("属性中指定当前（或父或祖先）容器中包含要调用以创建对象的实例方法的 bean 的名称。使用"),s("code",[t._v("Factory-method")]),t._v("属性设置工厂方法本身的名称。以下示例显示如何配置此类 Bean：")]),t._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- the factory bean, which contains a method called createInstance() --\x3e")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("bean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("serviceLocator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("examples.DefaultServiceLocator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- inject any dependencies required by this locator bean --\x3e")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("bean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- the bean to be created via the factory bean --\x3e")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("bean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("clientService"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("factory-bean")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("serviceLocator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("factory-method")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("createClientServiceInstance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])]),s("p",[t._v("下面的示例显示了相应的类：")]),t._v(" "),s("SwitchCode",{scopedSlots:t._u([{key:"java",fn:function(){return[s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DefaultServiceLocator")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClientService")]),t._v(" clientService "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClientServiceImpl")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClientService")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createClientServiceInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" clientService"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]},proxy:!0},{key:"kotlin",fn:function(){return[s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" DefaultServiceLocator "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("companion")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("object")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" clientService "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ClientServiceImpl")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createClientServiceInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" ClientService "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" clientService\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]},proxy:!0}])}),t._v(" "),s("p",[t._v("一个工厂类还可以包含多个工厂方法，如下面的示例所示：")]),t._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("bean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("serviceLocator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("examples.DefaultServiceLocator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- inject any dependencies required by this locator bean --\x3e")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("bean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("bean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("clientService"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("factory-bean")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("serviceLocator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("factory-method")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("createClientServiceInstance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("bean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("accountService"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("factory-bean")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("serviceLocator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("factory-method")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("createAccountServiceInstance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])]),s("p",[t._v("下面的示例显示了相应的类：")]),t._v(" "),s("SwitchCode",{scopedSlots:t._u([{key:"java",fn:function(){return[s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DefaultServiceLocator")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClientService")]),t._v(" clientService "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClientServiceImpl")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AccountService")]),t._v(" accountService "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AccountServiceImpl")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClientService")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createClientServiceInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" clientService"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AccountService")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createAccountServiceInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" accountService"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]},proxy:!0},{key:"kotlin",fn:function(){return[s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" DefaultServiceLocator "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("companion")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("object")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" clientService "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ClientServiceImpl")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" accountService "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("AccountServiceImpl")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createClientServiceInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" ClientService "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" clientService\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createAccountServiceInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" AccountService "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" accountService\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]},proxy:!0}])}),t._v(" "),s("p",[t._v("这种方法表明工厂Bean本身可以通过依赖注入(DI)进行管理和配置。参见 "),s("a",{attrs:{href:"https://docs.spring.io/spring/docs/5.2.6.RELEASE/spring-framework-reference/core.html#beans-factory-properties-detailed",target:"_blank",rel:"noopener noreferrer"}},[t._v("详细说明依赖关系和配置"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("在 Spring 文档中，"),s("code",[t._v("factory bean")]),t._v("是指在 Spring 容器中配置并通过"),s("a",{attrs:{href:"https://docs.spring.io/spring/docs/5.2.6.RELEASE/spring-framework-reference/core.html#beans-factory-class-instance-factory-method",target:"_blank",rel:"noopener noreferrer"}},[t._v("instance"),s("OutboundLink")],1),t._v("或"),s("a",{attrs:{href:"https://docs.spring.io/spring/docs/5.2.6.RELEASE/spring-framework-reference/core.html#beans-factory-class-static-factory-method",target:"_blank",rel:"noopener noreferrer"}},[t._v("static"),s("OutboundLink")],1),t._v("工厂方法创建对象的 bean 。相比之下，"),s("code",[t._v("FactoryBean")]),t._v("(注意大写)指的是特定于 Spring 的"),s("a",{attrs:{href:"https://docs.spring.io/spring/docs/5.2.6.RELEASE/spring-framework-reference/core.html#beans-factory-extension-factorybean",target:"_blank",rel:"noopener noreferrer"}},[t._v("FactoryBean"),s("OutboundLink")],1),t._v("实现类")])]),t._v(" "),s("h3",{attrs:{id:"确定-bean-的运行时类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#确定-bean-的运行时类型"}},[t._v("#")]),t._v(" 确定 Bean 的运行时类型")]),t._v(" "),s("p",[t._v("特定 bean 的运行时类型不是很容易确定的。Bean 元数据定义中的特定的类只是初始类引用，可能与声明的工厂方法组合，或者是可能导致 Bean 的不同运行时类型的"),s("code",[t._v("FactoryBean")]),t._v("类，或者在实例级工厂方法的情况下根本没有设置（改为通过特定的‘factory-Bean`名称进行解析)。此外，AOP 代理可以用基于接口的代理包装 Bean 实例，并对目标 Bean 的实际类型(仅限于其实现的接口）进行有限的公开。")]),t._v(" "),s("p",[t._v("要了解特定 Bean 的实际运行时类型，建议使用指定 Bean 名称的"),s("code",[t._v("BeanFactory.getType")]),t._v("调用。这会考虑以上所有情况，并返回"),s("code",[t._v("BeanFactory.getBean")]),t._v("调用将为同一 bean 名称返回的对象类型。")])],1)}),[],!1,null,null,null);a.default=n.exports}}]);